// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å email –≤ Electron

export function debugEmailError(error) {
  console.group('üîç Email Error Debug');
  console.log('Error type:', typeof error);
  console.log('Error constructor:', error?.constructor?.name);
  
  if (error instanceof Error) {
    console.log('Error message:', error.message);
    console.log('Error stack:', error.stack);
  } else if (typeof error === 'object') {
    console.log('Error object:', JSON.stringify(error, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è EmailJS
    if (error.status) console.log('Status:', error.status);
    if (error.text) console.log('Response text:', error.text);
    if (error.response) console.log('Response:', error.response);
  } else {
    console.log('Raw error:', error);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  if (navigator.onLine) {
    console.log('‚úÖ Network: Online');
  } else {
    console.log('‚ùå Network: Offline');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å EmailJS
  checkEmailJSAvailability();
  
  console.groupEnd();
}

async function checkEmailJSAvailability() {
  try {
    const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
      method: 'OPTIONS'
    });
    console.log('‚úÖ EmailJS API: Accessible');
  } catch (error) {
    console.log('‚ùå EmailJS API: Not accessible', error.message);
  }
}

export function enhanceEmailJSError(originalSendFunction) {
  return async function(...args) {
    try {
      const result = await originalSendFunction.apply(this, args);
      console.log('‚úÖ Email sent successfully:', result);
      return result;
    } catch (error) {
      console.error('‚ùå Email sending failed');
      debugEmailError(error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
      const enhancedError = new Error(
        `Email sending failed: ${error.message || error.text || 'Unknown error'}`
      );
      enhancedError.originalError = error;
      throw enhancedError;
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ EmailJS
export function validateEmailJSConfig(serviceId, templateId, publicKey) {
  const issues = [];
  
  if (!serviceId || serviceId.trim() === '') {
    issues.push('Service ID is missing or empty');
  }
  
  if (!templateId || templateId.trim() === '') {
    issues.push('Template ID is missing or empty');
  }
  
  if (!publicKey || publicKey.trim() === '') {
    issues.push('Public Key is missing or empty');
  }
  
  if (issues.length > 0) {
    console.warn('‚ö†Ô∏è EmailJS Configuration Issues:');
    issues.forEach(issue => console.warn(`  - ${issue}`));
    return false;
  }
  
  console.log('‚úÖ EmailJS configuration is valid');
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EmailJS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export async function testEmailJSConnection(serviceId, templateId, publicKey) {
  console.group('üß™ Testing EmailJS Connection');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (!validateEmailJSConfig(serviceId, templateId, publicKey)) {
    console.groupEnd();
    return false;
  }
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º EmailJS –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const emailjs = await import('emailjs-com');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EmailJS
    emailjs.init(publicKey);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    const testParams = {
      to_email: 'test@example.com',
      subject: 'Test Email from Electron App',
      message: 'This is a test email to verify EmailJS configuration.',
      from_name: 'Electron App Test'
    };
    
    console.log('Sending test email...');
    const result = await emailjs.send(serviceId, templateId, testParams);
    
    console.log('‚úÖ Test email sent successfully:', result);
    console.groupEnd();
    return true;
    
  } catch (error) {
    console.error('‚ùå Test email failed');
    debugEmailError(error);
    console.groupEnd();
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Electron-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
export function checkElectronEmailIssues() {
  console.group('üîß Electron Email Environment Check');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º User Agent
  console.log('User Agent:', navigator.userAgent);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å fetch
  if (typeof fetch !== 'undefined') {
    console.log('‚úÖ Fetch API: Available');
  } else {
    console.log('‚ùå Fetch API: Not available');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å XMLHttpRequest
  if (typeof XMLHttpRequest !== 'undefined') {
    console.log('‚úÖ XMLHttpRequest: Available');
  } else {
    console.log('‚ùå XMLHttpRequest: Not available');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  console.log('Origin:', window.location.origin);
  console.log('Protocol:', window.location.protocol);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage
  try {
    localStorage.setItem('test', 'test');
    localStorage.removeItem('test');
    console.log('‚úÖ LocalStorage: Available');
  } catch (error) {
    console.log('‚ùå LocalStorage: Not available', error.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å sessionStorage
  try {
    sessionStorage.setItem('test', 'test');
    sessionStorage.removeItem('test');
    console.log('‚úÖ SessionStorage: Available');
  } catch (error) {
    console.log('‚ùå SessionStorage: Not available', error.message);
  }
  
  console.groupEnd();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
export function createErrorReport(error, context = {}) {
  const report = {
    timestamp: new Date().toISOString(),
    error: {
      message: error.message || 'Unknown error',
      stack: error.stack,
      name: error.name,
      type: typeof error
    },
    context,
    environment: {
      userAgent: navigator.userAgent,
      online: navigator.onLine,
      origin: window.location.origin,
      protocol: window.location.protocol,
      language: navigator.language
    },
    apis: {
      fetch: typeof fetch !== 'undefined',
      xmlHttpRequest: typeof XMLHttpRequest !== 'undefined',
      localStorage: (() => {
        try {
          return typeof localStorage !== 'undefined';
        } catch {
          return false;
        }
      })()
    }
  };
  
  console.log('üìã Error Report:', JSON.stringify(report, null, 2));
  return report;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email
export function logEmailSuccess(result, params) {
  console.group('‚úÖ Email Sent Successfully');
  console.log('Timestamp:', new Date().toISOString());
  console.log('Result:', result);
  console.log('Parameters used:', {
    ...params,
    // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    to_email: params.to_email ? '***@***.***' : 'not provided',
    from_email: params.from_email ? '***@***.***' : 'not provided'
  });
  console.groupEnd();
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export default {
  debugEmailError,
  enhanceEmailJSError,
  validateEmailJSConfig,
  testEmailJSConnection,
  checkElectronEmailIssues,
  createErrorReport,
  logEmailSuccess
};